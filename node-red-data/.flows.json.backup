[
    {
        "id": "c18759d07acde4e0",
        "type": "tab",
        "label": "Поток 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a1b2c3d4.56789",
        "type": "tab",
        "label": "Автосервис Бот",
        "disabled": false,
        "info": ""
    },
    {
        "id": "20f6c1bd3005a766",
        "type": "tab",
        "label": "Автосервис Бот",
        "disabled": false,
        "info": ""
    },
    {
        "id": "d1b2c3d4e5f67890",
        "type": "tab",
        "label": "HTTP Request Test",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "12345678.90abcd",
        "type": "telegram bot",
        "botname": "Автосервис Бот",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "testenvironment": false,
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksport": "",
        "socksusername": "",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbothost": "",
        "localbotport": "",
        "publicbotport": "",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "f7cef455b73ef2c6",
        "type": "telegram receiver",
        "z": "a1b2c3d4.56789",
        "name": "",
        "bot": "12345678.90abcd",
        "saveDataDir": "",
        "filterCommands": false,
        "x": 140,
        "y": 120,
        "wires": [
            [
                "d2b51d8dc5812b38"
            ],
            []
        ]
    },
    {
        "id": "596314b0094cb77a",
        "type": "telegram sender",
        "z": "a1b2c3d4.56789",
        "name": "",
        "bot": "12345678.90abcd",
        "haserroroutput": false,
        "outputs": 1,
        "x": 760,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "22d6d8302914e2ea",
        "type": "inject",
        "z": "a1b2c3d4.56789",
        "name": "Запуск",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "86400",
        "crontab": "",
        "once": true,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 60,
        "wires": [
            [
                "c4cf040c5a7416ae"
            ]
        ]
    },
    {
        "id": "86d9b406c6068262",
        "type": "function",
        "z": "a1b2c3d4.56789",
        "name": "Обработка настроек",
        "func": "// Преобразуем массив в объект\nconst settings = {};\nmsg.payload.forEach(item => {\n    if (item.key && item.value) {\n        settings[item.key] = item.value;\n    }\n});\n\n// Сохраняем в контекст\nflow.set('settings', settings);\n\n// Возвращаем для отладки\nreturn { \n    payload: settings,\n    settings: settings // Дублируем для удобства\n};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 60,
        "wires": [
            [
                "f0c99edd50f036ed"
            ]
        ]
    },
    {
        "id": "f0c99edd50f036ed",
        "type": "debug",
        "z": "a1b2c3d4.56789",
        "name": "Настройки",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 750,
        "y": 60,
        "wires": []
    },
    {
        "id": "c4cf040c5a7416ae",
        "type": "http request",
        "z": "a1b2c3d4.56789",
        "name": "GET /settings",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://strapi:1337/settings",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNzUyMTUzNjc4LCJleHAiOjE3NTQ3NDU2Nzh9.mUajiuHuj0l6ZmNLp9SowBTB8C_cQEvdCEDn2DXXUaY"
            }
        ],
        "x": 350,
        "y": 60,
        "wires": [
            [
                "86d9b406c6068262"
            ]
        ]
    },
    {
        "id": "2593156e619bc500",
        "type": "function",
        "z": "a1b2c3d4.56789",
        "name": "Подготовка запроса к Yandex GPT",
        "func": "let IAM = flow.get('settings').IAM;\nconst carProjectId = msg.carProjectId; // Получаем из предыдущего узла\n\n    // Формируем тело запроса для Yandex GPT API\nmsg.payload = {\n    \"modelUri\": \"gpt://b1goqv6uhnf7i2fqof2p/yandexgpt\",\n    \"completionOptions\": {\n        \"stream\": false,\n        \"temperature\": 0.3,\n        \"maxTokens\": \"2000\",\n        \"reasoningOptions\": {\n            \"mode\": \"DISABLED\"\n        }\n    },\n    \"messages\": [\n        {\n            \"role\": \"system\",\n            \"text\": \"Ты помощник автосервиса. Анализируй текст сообщений и преобразуй их в структурированные данные для записи в таблицу.\\n\" +\n                \"Таблица имеет следующие поля: name (услуга), status, completionDate, totalTime (в часах), totalCost (в рублях), car_project (связь с авто).\\n\" +\n                \"Правила обработки:\\n\" +\n                \"1. Извлекай название услуги из текста\\n\" +\n                \"2. Если время не указано - используй 0.5 часа\\n\" +\n                \"3. Статус по умолчанию: 'В работе'\\n\" +\n                \"4. Дату completionDate оставляй пустой (null)\\n\" +\n                \"5. Все числовые значения указывай без единиц измерения (только цифры)\\n\\n\" +\n                \"Отвечай строго в JSON формате:\\n\" +\n                \"{\\n\" +\n                \"  \\\"records\\\": [\\n\" +\n                \"    {\\n\" +\n                \"      \\\"name\\\": string,\\n\" +\n                \"      \\\"status\\\": string,\\n\" +\n                \"      \\\"completionDate\\\": null,\\n\" +\n                \"      \\\"totalTime\\\": number,\\n\" +\n                \"      \\\"totalCost\\\": number,\\n\" +\n                \"      \\\"car_project\\\": \\\"\" + carProjectId + \"\\\"\\n\" + \n                \"    }\\n\" +\n                \"  ]\\n\" +\n                \"}\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"Работ:\\n\" + msg.originalContent\n        }\n    ]\n};\n\nmsg.headers = {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": `Bearer ${IAM}`\n};\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 240,
        "wires": [
            [
                "7645ac5712499780"
            ]
        ]
    },
    {
        "id": "a6ef70517b9be04d",
        "type": "function",
        "z": "a1b2c3d4.56789",
        "name": "function 5",
        "func": "if (msg.payload.error) {\n    node.error(\"Yandex GPT API error: \" + msg.payload.message, msg);\n    msg.payload = {\n        chatId: msg.chatId,\n        type: \"message\",\n        content: \"❌ Ошибка нейросети: \" + msg.payload.message,\n        replyMarkup: { remove_keyboard: true }\n    };\n    return msg;\n}\n\ntry {\n    const STRAPI_JWT_SECRET = flow.get('settings').STRAPI_JWT_SECRET;\n    const response = typeof msg.payload === 'string'\n        ? JSON.parse(msg.payload)\n        : msg.payload;\n\n    // Извлекаем и очищаем ответ нейросети\n    const gptText = response.result?.alternatives?.[0]?.message?.text?.replace(/```/g, '').trim();\n    if (!gptText) throw new Error(\"Некорректный ответ нейросети\");\n\n    // Парсим JSON\n    const gptData = JSON.parse(gptText);\n    const record = gptData.records?.[0];\n    if (!record) throw new Error(\"Не найдены данные о работе\");\n\n    // Формируем payload\n    msg.payload = {\n        name: record.name || \"Неизвестная услуга\",\n        status: record.status || \"В работе\",\n        completionDate: null,\n        totalTime: Number(record.totalTime) || 0.5,\n        totalCost: Number(record.totalCost) || 500,\n        car_project: msg.carProjectId\n    };\n\n    // Устанавливаем headers\n    msg.headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${STRAPI_JWT_SECRET}`\n    };\n\n    // Сохраняем важные поля\n    msg.chatId = msg.chatId || msg.originalChatId;\n    msg.originalContent = msg.originalContent;\n    msg.workName = msg.payload.name;\n    return msg;\n\n} catch (err) {\n    node.error(\"Ошибка обработки: \" + err.message, msg);\n    msg.payload = {\n        chatId: msg.chatId,\n        type: \"message\",\n        content: `❌ Ошибка: ${err.message}\\n\\nПример формата: \"Замена масла - 3000 - 1\"`,\n        replyMarkup: { remove_keyboard: true }\n    };\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 300,
        "wires": [
            [
                "d9babb9078b66a3c"
            ]
        ]
    },
    {
        "id": "d9babb9078b66a3c",
        "type": "http request",
        "z": "a1b2c3d4.56789",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://strapi:1337/works",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 920,
        "y": 300,
        "wires": [
            [
                "518564bdd57ac7d1"
            ]
        ]
    },
    {
        "id": "987e4163e6b9a981",
        "type": "telegram sender",
        "z": "a1b2c3d4.56789",
        "name": "",
        "bot": "12345678.90abcd",
        "haserroroutput": false,
        "outputs": 1,
        "x": 990,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "1a8f14b172c279e4",
        "type": "function",
        "z": "a1b2c3d4.56789",
        "name": "Создание Car Project",
        "func": "if (msg.payload.action === \"create_car_project\") {\n    // 1. Подготовка данных для создания проекта\n    const carProjectData = {\n        \"date_start\": new Date().toISOString(),\n        \"name\": `Проект для ${msg.payload.car_number}`,\n        \"status\": \"active\",\n        \"chat_id\": msg.payload.chatId.toString(),\n        \"car\": `${msg.payload.car_number}`\n    };\n\n    // 2. Сообщение для отправки в Telegram (первый выход)\n    const telegramMsg = {\n        payload: {\n            chatId: msg.payload.chatId,\n            type: \"message\",\n            content: `✅ Создан новый проект для машины: ${msg.payload.car_number}`,\n            replyMarkup: { remove_keyboard: true }\n        }\n    };\n\n    // 3. Данные для API запроса (второй выход)\n    const apiRequestMsg = {\n        payload: carProjectData,\n        originalChatId: msg.payload.chatId,\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${flow.get('settings').STRAPI_JWT_SECRET}`\n        }\n    };\n\n    // Возвращаем оба сообщения (используем multiple outputs)\n    return [telegramMsg, apiRequestMsg];\n    return msg;\n}\n\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 400,
        "wires": [
            [
                "987e4163e6b9a981"
            ],
            [
                "e583d7e485f4ae8c"
            ]
        ]
    },
    {
        "id": "d2b51d8dc5812b38",
        "type": "function",
        "z": "a1b2c3d4.56789",
        "name": "Обработка входящих сообщений",
        "func": "try {\n    // Базовые проверки\n    if (!msg.originalMessage || !msg.payload) {\n        throw new Error(\"Неверная структура сообщения\");\n    }\n\n    // Формируем объект с информацией\n    const full_info = {\n        user_tag: msg.originalMessage.from.username,\n        content: msg.payload.content.trim(),\n        date: msg.payload.date || new Date().toISOString(),\n        chatId: msg.originalMessage.chat.id\n    };\n\n    // Обработка состояния ожидания номера машины\n    const waitingKey = `waiting_car_${full_info.chatId}`;\n    if (flow.get(waitingKey)) {\n        flow.set(waitingKey, false); // Сбрасываем флаг\n\n        // Проверка минимальной длины номера\n        if (full_info.content.length < 3) {\n            return {\n                payload: {\n                    chatId: full_info.chatId,\n                    type: \"message\",\n                    content: \"❌ Номер/VIN слишком короткий\",\n                    replyMarkup: { remove_keyboard: true }\n                }\n            };\n        }\n\n        return [null, {\n            payload: {\n                ...full_info,\n                action: \"create_car_project\",\n                car_number: full_info.content\n            }\n        }];\n    }\n\n    // Обработка команд\n    switch (full_info.content.toLowerCase()) {\n        case '/start':\n            flow.set(waitingKey, true);\n            return {\n                payload: {\n                    chatId: full_info.chatId,\n                    type: \"message\",\n                    content: \"🚗 Введите VIN или номер машины:\",\n                    replyMarkup: { remove_keyboard: true }\n                }\n            };\n\n        case 'подтвердить':\n            return [null, {\n                payload: {\n                    ...full_info,\n                    action: \"confirm_works\"\n                }\n            }];\n\n        default:\n            // Все остальное считаем работой\n            return [null, {\n                payload: {\n                    ...full_info,\n                    action: \"add_work\",\n                    service_name: full_info.content\n                }\n            }];\n    }\n} catch (error) {\n    console.error(\"Ошибка обработки:\", error);\n    return {\n        payload: {\n            chatId: msg.originalMessage?.chat?.id,\n            type: \"message\",\n            content: \"⚠️ Ошибка обработки запроса\"\n        }\n    };\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 120,
        "wires": [
            [
                "596314b0094cb77a"
            ],
            [
                "1a8f14b172c279e4",
                "ada6034235057f8f",
                "1a91a4ac3a8ae991"
            ]
        ]
    },
    {
        "id": "e583d7e485f4ae8c",
        "type": "http request",
        "z": "a1b2c3d4.56789",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://strapi:1337/car-projects",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 970,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "ada6034235057f8f",
        "type": "function",
        "z": "a1b2c3d4.56789",
        "name": "Ищем CarID",
        "func": "if (msg.payload.action === \"add_work\") {\n    const chatId = msg.payload.chatId;\n\n    // Сохраняем важные данные перед перезаписью payload\n    msg.originalChatId = msg.payload.chatId;\n    msg.originalContent = msg.payload.content;\n\n    msg.method = \"GET\";\n    msg.url = `http://strapi:1337/car-projects?_sort=date_start:desc&chat_id=${chatId}`;\n    msg.headers = {\n        \"Authorization\": `Bearer ${flow.get('settings').STRAPI_JWT_SECRET}`\n    };\n\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 180,
        "wires": [
            [
                "b9ba795c0e28fc0d"
            ]
        ]
    },
    {
        "id": "2457338faee71d8a",
        "type": "function",
        "z": "a1b2c3d4.56789",
        "name": "Процесс поиска",
        "func": "const responseData = typeof msg.payload === 'string' \n        ? JSON.parse(msg.payload) \n        : msg.payload;\n    \n    // 2. Получаем массив проектов\n    const projects = Array.isArray(responseData) \n        ? responseData \n        : responseData.data || [];\n\nif (projects.length === 0) {\n    return {\n        payload: {\n            chatId: msg.originalChatId || msg.chatId, // Используем сохраненный chatId\n            type: \"message\",\n            content: \"❌ Не найден активный проект. Сначала создайте проект с помощью /start\",\n            replyMarkup: { remove_keyboard: true }\n        }\n    };\n}\n\n// Выбираем самый свежий проект (сортировка уже сделана в запросе)\nconst activeProject = projects.find(p => p.status === \"active\") || projects[0];\n\n// Передаем данные дальше\nmsg.carProjectId = activeProject.id;\nmsg.chatId = msg.originalChatId; \n\nmsg.payload.content = msg.originalContent; \n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 180,
        "wires": [
            [
                "2593156e619bc500"
            ]
        ]
    },
    {
        "id": "b9ba795c0e28fc0d",
        "type": "http request",
        "z": "a1b2c3d4.56789",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 920,
        "y": 180,
        "wires": [
            [
                "2457338faee71d8a"
            ]
        ]
    },
    {
        "id": "518564bdd57ac7d1",
        "type": "function",
        "z": "a1b2c3d4.56789",
        "name": "function 3",
        "func": "if (msg.statusCode === 200) {\n    return {\n        payload: {\n            chatId: msg.chatId || msg.originalChatId,\n            type: \"message\",\n            content: `✅ Работа \"${msg.workName}\" успешно добавлена`,\n            replyMarkup: { remove_keyboard: true }\n        }\n    };\n} else {\n    return {\n        payload: {\n            chatId: msg.chatId,\n            type: \"message\",\n            content: \"❌ Ошибка при добавлении работы\",\n            replyMarkup: { remove_keyboard: true }\n        }\n    };\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 300,
        "wires": [
            [
                "3e21adf95178b681"
            ]
        ]
    },
    {
        "id": "3e21adf95178b681",
        "type": "telegram sender",
        "z": "a1b2c3d4.56789",
        "name": "",
        "bot": "12345678.90abcd",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1290,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "7645ac5712499780",
        "type": "http request",
        "z": "a1b2c3d4.56789",
        "name": "Запрос к Yandex GPT API",
        "method": "POST",
        "ret": "json",
        "paytoqs": "ignore",
        "url": "https://llm.api.cloud.yandex.net/foundationModels/v1/completion",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1110,
        "y": 240,
        "wires": [
            [
                "a6ef70517b9be04d"
            ]
        ]
    },
    {
        "id": "9d21d401f365d591",
        "type": "comment",
        "z": "a1b2c3d4.56789",
        "name": "",
        "info": "let full_info = {\n    \"user_tag\": msg.originalMessage.from.username,\n    \"content\": msg.payload.content,\n    \"date\": msg.payload.date,\n    \"chatId\": msg.originalMessage.chat.id,\n};\n\n// Проверяем, ожидаем ли мы номер машины после /start\nconst waitingForCarNumber = flow.get(`waiting_car_${full_info.chatId}`) || false;\n\nif (waitingForCarNumber) {\n    // Сбрасываем флаг ожидания\n    flow.set(`waiting_car_${full_info.chatId}`, false);\n    \n    // Создаем новый car_project\n    return [null, {\n        payload: {\n            ...full_info,\n            action: \"create_car_project\",\n            car_number: full_info.content\n        }\n    }];\n}\n\n// Проверяем команды только если не ожидаем номер машины\nif (!waitingForCarNumber) {\n    switch (full_info.content.toLowerCase()) {\n        case '/start':\n            flow.set(`waiting_car_${full_info.chatId}`, true);\n            return {\n                payload: {\n                    chatId: full_info.chatId,\n                    type: \"message\",\n                    content: \"🚗 Введите VIN или номер машины:\",\n                    replyMarkup: { remove_keyboard: true }\n                }\n            };\n\n        case 'подтвердить':\n            if (flow.get(\"mechanic_messages\") && flow.get(\"mechanic_messages\").length > 0) {\n                return [null, { payload: full_info }];\n            } else {\n                return {\n                    payload: {\n                        chatId: full_info.chatId,\n                        type: \"message\",\n                        content: \"❌ Нет работ для подтверждения\",\n                        replyMarkup: { remove_keyboard: true }\n                    }\n                };\n            }\n    }\n}\n\n// Все что не команда и не номер после /start - считаем работой\nreturn [null, {\n    payload: {\n        ...full_info,\n        action: \"add_work\",\n        service_name: full_info.content\n    }\n}];",
        "x": 390,
        "y": 180,
        "wires": []
    },
    {
        "id": "5b7b8c47bd4b2a4c",
        "type": "function",
        "z": "a1b2c3d4.56789",
        "name": "Подготовка запроса к Yandex GPT",
        "func": "let IAM = flow.get('settings').IAM;\nconst carProjectId = msg.carProjectId; // Получаем из предыдущего узла\n\n    // Формируем тело запроса для Yandex GPT API\nmsg.payload = {\n    \"modelUri\": \"gpt://b1goqv6uhnf7i2fqof2p/yandexgpt\",\n    \"completionOptions\": {\n        \"stream\": false,\n        \"temperature\": 0.3,\n        \"maxTokens\": \"2000\",\n        \"reasoningOptions\": {\n            \"mode\": \"DISABLED\"\n        }\n    },\n    \"messages\": [\n        {\n            \"role\": \"system\",\n            \"text\": \"Ты помощник автосервиса. Анализируй текст сообщений и преобразуй их в структурированные данные для записи в таблицу.\\n\" +\n                \"Таблица имеет следующие поля: name (услуга), status, completionDate, totalTime (в часах), totalCost (в рублях), car_project (связь с авто).\\n\" +\n                \"Правила обработки:\\n\" +\n                \"1. Извлекай название услуги из текста\\n\" +\n                \"2. Если время не указано - используй 0.5 часа\\n\" +\n                \"3. Статус по умолчанию: 'В работе'\\n\" +\n                \"4. Дату completionDate оставляй пустой (null)\\n\" +\n                \"5. Все числовые значения указывай без единиц измерения (только цифры)\\n\\n\" +\n                \"Отвечай строго в JSON формате:\\n\" +\n                \"{\\n\" +\n                \"  \\\"records\\\": [\\n\" +\n                \"    {\\n\" +\n                \"      \\\"name\\\": string,\\n\" +\n                \"      \\\"status\\\": string,\\n\" +\n                \"      \\\"completionDate\\\": null,\\n\" +\n                \"      \\\"totalTime\\\": number,\\n\" +\n                \"      \\\"totalCost\\\": number,\\n\" +\n                \"      \\\"car_project\\\": \\\"\" + carProjectId + \"\\\"\\n\" + \n                \"    }\\n\" +\n                \"  ]\\n\" +\n                \"}\"\n        },\n        {\n            \"role\": \"user\",\n            \"text\": \"Работ:\\n\" + msg.originalContent\n        }\n    ]\n};\n\nmsg.headers = {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": `Bearer ${IAM}`\n};\n\n\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 600,
        "wires": [
            [
                "452618b20265856e"
            ]
        ]
    },
    {
        "id": "452618b20265856e",
        "type": "http request",
        "z": "a1b2c3d4.56789",
        "name": "Запрос к Yandex GPT API",
        "method": "POST",
        "ret": "json",
        "paytoqs": "ignore",
        "url": "https://llm.api.cloud.yandex.net/foundationModels/v1/completion",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 660,
        "y": 600,
        "wires": [
            [
                "1a2970861e1aa5da"
            ]
        ]
    },
    {
        "id": "e0ec1405923b80f5",
        "type": "inject",
        "z": "a1b2c3d4.56789",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 580,
        "wires": [
            [
                "5b7b8c47bd4b2a4c"
            ]
        ]
    },
    {
        "id": "1a2970861e1aa5da",
        "type": "debug",
        "z": "a1b2c3d4.56789",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 600,
        "wires": []
    },
    {
        "id": "1a91a4ac3a8ae991",
        "type": "function",
        "z": "a1b2c3d4.56789",
        "name": "Подтверждение работ",
        "func": "if (msg.payload.action === \"confirm_works\") {\n    const chatId = msg.payload.chatId;\n    \n        // Если нет сохраненного ID, ищем проект\n        msg.originalChatId = chatId;\n        return {\n            method: \"GET\",\n            url: `http://strapi:1337/car-projects?chat_id=${chatId}&status=active&_sort=date_start:desc&_limit=1`,\n            headers: {\n                \"Authorization\": `Bearer ${flow.get('settings').STRAPI_JWT_SECRET}`\n            }\n        };\n    }\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 520,
        "wires": [
            [
                "02357cca71f74a2f",
                "a3c2f547f34a49de"
            ]
        ]
    },
    {
        "id": "02357cca71f74a2f",
        "type": "http request",
        "z": "a1b2c3d4.56789",
        "name": "Запрос проекта",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 780,
        "y": 520,
        "wires": [
            [
                "0bb70c20507b47e9",
                "a4934eae5bb9f8f6"
            ]
        ]
    },
    {
        "id": "0bb70c20507b47e9",
        "type": "function",
        "z": "a1b2c3d4.56789",
        "name": "Обработка ответа",
        "func": "// Преобразуем строку в объект если нужно\nlet project = msg.payload;\nif (typeof project === 'string') {\n    try {\n        project = JSON.parse(project);\n    } catch (e) {\n        node.error(\"Ошибка парсинга JSON\", msg);\n        return null;\n    }\n}\n\n// Если получили массив (при первом запросе), берем первый элемент\nif (Array.isArray(project)) {\n    project = project[0];\n}\n\nif (project && project.id) {\n    // Сохраняем ID проекта для этого чата\n    flow.set(`project_id_${msg.originalChatId}`, project.id);\n    \n    const worksCount = project.works ? project.works.length : 0;\n    \n    // Формируем сообщение для пользователя\n    const userMsg = {\n        payload: {\n            chatId: msg.originalChatId,\n            type: \"message\",\n            content: worksCount > 0 \n                ? `✅ Подтверждено ${worksCount} работ. Закрываю проект...`\n                : \"✅ Закрываю проект...\"\n        }\n    };\n    \n    // Формируем запрос на обновление\n    const updateMsg = {\n        method: \"PUT\",\n        url: `http://strapi:1337/car-projects/${project.id}`,\n        headers: {\n            \"Authorization\": `Bearer ${flow.get('settings').STRAPI_JWT_SECRET}`,\n            \"Content-Type\": \"application/json\"\n        },\n        payload: {\n            status: \"completed\",\n            date_end: new Date().toISOString()\n        },\n        originalChatId: msg.originalChatId\n    };\n    \n    return [userMsg, updateMsg];\n} else {\n    return {\n        payload: {\n            chatId: msg.originalChatId,\n            type: \"message\",\n            content: \"❌ Не найден активный проект для подтверждения\"\n        }\n    };\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 480,
        "wires": [
            [
                "7716908ded226f10"
            ],
            [
                "02d858965219a0a2"
            ]
        ]
    },
    {
        "id": "02d858965219a0a2",
        "type": "http request",
        "z": "a1b2c3d4.56789",
        "name": "Обновление проекта",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1140,
        "y": 540,
        "wires": [
            [
                "95fc79f7f1a8e050",
                "b12a7ac6543af6e1"
            ]
        ]
    },
    {
        "id": "7716908ded226f10",
        "type": "telegram sender",
        "z": "a1b2c3d4.56789",
        "name": "",
        "bot": "12345678.90abcd",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1470,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "95fc79f7f1a8e050",
        "type": "function",
        "z": "a1b2c3d4.56789",
        "name": "Проверка обновления",
        "func": "// Обработка ответа от Strapi\nif (msg.statusCode === 200) {\n    // Удаляем сохраненный ID проекта после успешного завершения\n    return {\n        payload: {\n            chatId: msg.originalChatId,\n            type: \"message\",\n            content: \"✅ Проект успешно завершён!\"\n        }\n    };\n} else {\n    return {\n        payload: {\n            chatId: msg.originalChatId,\n            type: \"message\",\n            content: \"⚠️ Не удалось завершить проект. Попробуйте позже.\"\n        }\n    };\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 620,
        "wires": [
            [
                "7716908ded226f10",
                "e16508355dfc19e2"
            ]
        ]
    },
    {
        "id": "a3c2f547f34a49de",
        "type": "debug",
        "z": "a1b2c3d4.56789",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 480,
        "wires": []
    },
    {
        "id": "a4934eae5bb9f8f6",
        "type": "debug",
        "z": "a1b2c3d4.56789",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 560,
        "wires": []
    },
    {
        "id": "b12a7ac6543af6e1",
        "type": "debug",
        "z": "a1b2c3d4.56789",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 520,
        "wires": []
    },
    {
        "id": "e16508355dfc19e2",
        "type": "debug",
        "z": "a1b2c3d4.56789",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 680,
        "wires": []
    },
    {
        "id": "a1b2c3d4e5f6",
        "type": "inject",
        "z": "d1b2c3d4e5f67890",
        "name": "Trigger Request",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 120,
        "wires": [
            [
                "b1b2c3d4e5f6"
            ]
        ]
    },
    {
        "id": "b1b2c3d4e5f6",
        "type": "http request",
        "z": "d1b2c3d4e5f67890",
        "name": "Fetch Post #1",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://jsonplaceholder.typicode.com/posts/1",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 350,
        "y": 120,
        "wires": [
            [
                "c1b2c3d4e5f6"
            ]
        ]
    },
    {
        "id": "c1b2c3d4e5f6",
        "type": "debug",
        "z": "d1b2c3d4e5f67890",
        "name": "Show Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 120,
        "wires": []
    }
]